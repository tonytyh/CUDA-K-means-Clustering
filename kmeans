#include<stdio.h>
#include<time.h>
#include <stdlib.h>
#include<math.h>
#include<random>
#include<iostream>


typedef struct
{
	float x = 0;
	float y = 0;
	float z = 0;
	long c = NULL;
}point;

void generate_random_data(point * data, long number_of_data, long number_of_clusters)
{
	srand(time(0));
	for (long i = 0; i < number_of_data; i++)
	{
		data[i].x = (float(rand())) / RAND_MAX;
		data[i].y = (float(rand())) / RAND_MAX;
		data[i].z = (float(rand())) / RAND_MAX;
		data[i].c = rand() % number_of_clusters;
	}
}

void generate_random_centroids(point * centroids, long number_of_clusters)
{
	srand(time(0));
	for (long i = 0; i < number_of_clusters; i++)
	{
		centroids[i].x = float(rand()) / RAND_MAX;
		centroids[i].y = float(rand()) / RAND_MAX;
		centroids[i].z = float(rand()) / RAND_MAX;
	}
}

void generate_normal_data(point * data, point * centroids, long number_of_clusters, long * cluster_volume)
{
	std::default_random_engine de(time(0));
	long counter = 0;

	for (int c = 0; c < number_of_clusters; c++)
	{
		std::normal_distribution<float> nd_x(centroids[c].x, 0.01);
		std::normal_distribution<float> nd_y(centroids[c].y, 0.01);
		std::normal_distribution<float> nd_z(centroids[c].z, 0.01);
		for (int i = 0; i < cluster_volume[c]; i++)
		{
			data[counter].x = nd_x(de);
			data[counter].y = nd_y(de);
			data[counter].z = nd_z(de);
			counter++;
		}


	}

}

void update_centroids(point * data, point * centroids, long *cluster_volume, long number_of_data, const long number_of_clusters)
{

	//point temp_sum[number_of_clusters];
	point * temp_sum = new point[number_of_clusters];
	memset(cluster_volume, 0, sizeof(long) * number_of_clusters);

	for (long i = 0; i < number_of_data; i++)
	{
		temp_sum[data[i].c].x += data[i].x;
		temp_sum[data[i].c].y += data[i].y;
		temp_sum[data[i].c].z += data[i].z;
		cluster_volume[data[i].c]++;

	}

	for (long c = 0; c < number_of_clusters; c++)
		//average
		if (cluster_volume[c] != 0)
		{
			temp_sum[c].x /= cluster_volume[c];
			temp_sum[c].y /= cluster_volume[c];
			temp_sum[c].z /= cluster_volume[c];
		}

	for (long c = 0; c < number_of_clusters; c++)
	{
		centroids[c].x = temp_sum[c].x;
		centroids[c].y = temp_sum[c].y;
		centroids[c].z = temp_sum[c].z;
	}

	//	for (long c = 0; c < number_of_clusters; c++)
	//	{
	//
	//		printf("[sum] cluster: %d, volume: %d, x: %.3f y: %.3f \n",c,cluster_volume[c],temp_sum[c].x, temp_sum[c].y);
	//	}

}


void print_data(point * data, long number_of_data)
{
	for (long i = 0; i<number_of_data; i++)
	{
		printf("[%.3f,%.3f,%.3f %d]\n", data[i].x, data[i].y, data[i].z, data[i].c);
	}

}
void print_centroids(point * centroids, long number_of_clusters, long * cluster_volume)
{
	for (long c = 0; c < number_of_clusters; c++)
	{
		printf("centroids: %d [%.3f,%.3f,%.3f] volume: %d\n", c, centroids[c].x, centroids[c].y, centroids[c].z, cluster_volume[c]);
	}

}

void test_sum()
{
	long number_of_data = 100;
	const long number_of_clusters = 20;
	point * data = new point[number_of_data]; //data[number_of_data];
	generate_random_data(data, number_of_data, number_of_clusters);

	print_data(data, number_of_data);
	//    point centroids[number_of_clusters];
	//    sum(data, centroids, number_of_data, number_of_clusters);

}

__global__ void  update_cluster_label(point * d_data, point * d_centroids, long d_number_of_data, long d_number_of_clusters)
{
	//global index
	long idx = threadIdx.y * blockDim.x + threadIdx.x;
	float min = 10000000.0;
	float temp;
	//	long new_label = NULL;

	if (idx < d_number_of_data)
	{
		for (long c = 0; c < d_number_of_clusters; c++)
		{
			temp = sqrt(pow(d_data[idx].x - d_centroids[c].x, 2) + pow(d_data[idx].y - d_centroids[c].y, 2) + pow(d_data[idx].z - d_centroids[c].z, 2));
			if (temp < min)
			{
				min = temp;
				d_data[idx].c = c;
			}

		}
	}

}



int main()
{
	srand(time(0));
	//	long number_of_data = 1000;
	long number_of_data = 0;
	const long number_of_clusters = 3;
	long cluster_volume[number_of_clusters];

	for (int c = 0; c < number_of_clusters; c++)
	{
		cluster_volume[c] = rand() % 1000;
		number_of_data += cluster_volume[c];
		printf("centroid [%d] volume: %d\n", c, cluster_volume[c]);

	}

	//define centroids
	point centroids[number_of_clusters];
		
	//centroids[0].x = 50;
	//centroids[0].y = 50;
	//centroids[0].z = 50;
	//centroids[1].x = 200;
	//centroids[1].y = 200;
	//centroids[1].z = 200;
	//centroids[2].x = 300;
	//centroids[2].y = 300;
	//centroids[2].z = 300;

	//centroids[0].x = 50;
	//centroids[0].y = 20;
	//centroids[0].z = 30;
	//centroids[1].x = 0;
	//centroids[1].y = 0;
	//centroids[1].z = 0;
	//centroids[2].x = -20;
	//centroids[2].y = -20;
	//centroids[2].z = -30;

	centroids[0].x = 0.5;
	centroids[0].y = 0.5;
	centroids[0].z = 0.5;
	centroids[1].x = 0;
	centroids[1].y = 0;
	centroids[1].z = 0;
	centroids[2].x = -0.5;
	centroids[2].y = -0.5;
	centroids[2].z = -0.5;

	//define data
	point * data = new point[number_of_data];

	//	generate_random_data(data, number_of_data, number_of_clusters);
	generate_normal_data(data, centroids, number_of_clusters, cluster_volume);
	generate_random_centroids(centroids, number_of_clusters);




	//	define cuda data
	point * d_data;
	cudaMalloc(&d_data, sizeof(point) * number_of_data);
	cudaMemcpy(d_data, data, sizeof(point) * number_of_data, cudaMemcpyHostToDevice);

	//define cuda cnetroids
	point * d_centroids;
	cudaMalloc(&d_centroids, sizeof(point) * number_of_clusters);
	cudaMemcpy(d_centroids, centroids, sizeof(point) * number_of_clusters, cudaMemcpyHostToDevice);

	//	print_data(data, number_of_data);
	print_centroids(centroids, number_of_clusters, cluster_volume);


	for (long i = 0; i < 20; i++)
	{
		//update
		update_cluster_label << <number_of_data / 1024 + 1, 1024 >> >(d_data, d_centroids, number_of_data, number_of_clusters);
		cudaMemcpy(data, d_data, sizeof(point) * number_of_data, cudaMemcpyDeviceToHost);
		update_centroids(data, centroids, cluster_volume, number_of_data, number_of_clusters);
		printf("iteration %d:\n\n", i);
		print_centroids(centroids, number_of_clusters, cluster_volume);
		cudaMemcpy(d_centroids, centroids, sizeof(point) * number_of_clusters, cudaMemcpyHostToDevice);
	}
	//print_data(data, number_of_data);


}
